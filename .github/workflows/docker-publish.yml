name: Docker

on:
  release:
    branches: main
    types: [published]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.setup-matrix.outputs.matrix }}
      tag: ${{ steps.setup-env.outputs.tag }}
      image_name: ${{ steps.setup-env.outputs.image_name }}
      release_version: ${{ steps.setup-env.outputs.release_version }}
    steps:
      - uses: actions/checkout@v2

      - id: setup-env
        name: Setup Env
        run: |
          echo "GITHUB_REF = $GITHUB_REF"
          # Set Tag
          export TAG=${GITHUB_REF#refs/tags/}
          echo "TAG = $TAG"
          echo "::set-output name=tag::$TAG"
          echo "TAG=$TAG" >> $GITHUB_ENV

          # Set Image Name
          export IMAGE_NAME=$(echo $TAG | cut -f1 -d'/')
          echo "IMAGE_NAME = $IMAGE_NAME"
          echo "::set-output name=image_name::$IMAGE_NAME"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

          # Set Release Version
          export RELEASE_VERSION=$(echo $TAG | cut -f2 -d'/')
          echo "RELEASE_VERSION = $RELEASE_VERSION"
          echo "::set-output name=release_version::$RELEASE_VERSION"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

      - id: setup-matrix
        name: Setup Matrix
        run: |
          export VERSIONS=$(jq -c . $IMAGE_NAME/versions.json)
          echo $VERSIONS
          echo "::set-output name=matrix::$VERSIONS"

  build-and-push:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: |
          export IMAGE_NAME=${{needs.setup.outputs.image_name}}
          echo "IMAGE_NAME = $IMAGE_NAME"
          export RELEASE_VERSION=${{needs.setup.outputs.release_version}}
          echo "RELEASE_VERSION = $RELEASE_VERSION"

          # Create Build Args from Matrix Context
          export BUILD_ARGS=$(echo "$MATRIX_CONTEXT" | jq -r '.dependencies' | jq -r 'to_entries[] | "--build-arg \(.key)=\(.value)"')
          echo $BUILD_ARGS

          # Build and Tag Image
          docker build . \
          --file ${IMAGE_NAME}/Dockerfile \
          --tag regiocom/build-images:${IMAGE_NAME}_${RELEASE_VERSION}_${{ matrix.name }} \
          --tag regiocom/build-images:${IMAGE_NAME}_${{ matrix.name }} \
          $BUILD_ARGS

          # Push Image to Dockerhub
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker push regiocom/build-images:${IMAGE_NAME}_${RELEASE_VERSION}_${{ matrix.name }}
          docker push regiocom/build-images:${IMAGE_NAME}_${{ matrix.name }}